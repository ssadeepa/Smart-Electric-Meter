
task 9.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800200  00800200  00000a5e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000009ea  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000001c  00800200  00800200  00000a5e  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000a5e  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000a90  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000090  00000000  00000000  00000ad0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001467  00000000  00000000  00000b60  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000d2d  00000000  00000000  00001fc7  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000077c  00000000  00000000  00002cf4  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001c0  00000000  00000000  00003470  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000698  00000000  00000000  00003630  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000640  00000000  00000000  00003cc8  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000080  00000000  00000000  00004308  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	71 c0       	rjmp	.+226    	; 0xe4 <__ctors_end>
   2:	00 00       	nop
   4:	81 c0       	rjmp	.+258    	; 0x108 <__bad_interrupt>
   6:	00 00       	nop
   8:	7f c0       	rjmp	.+254    	; 0x108 <__bad_interrupt>
   a:	00 00       	nop
   c:	7d c0       	rjmp	.+250    	; 0x108 <__bad_interrupt>
   e:	00 00       	nop
  10:	7b c0       	rjmp	.+246    	; 0x108 <__bad_interrupt>
  12:	00 00       	nop
  14:	79 c0       	rjmp	.+242    	; 0x108 <__bad_interrupt>
  16:	00 00       	nop
  18:	77 c0       	rjmp	.+238    	; 0x108 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	75 c0       	rjmp	.+234    	; 0x108 <__bad_interrupt>
  1e:	00 00       	nop
  20:	73 c0       	rjmp	.+230    	; 0x108 <__bad_interrupt>
  22:	00 00       	nop
  24:	71 c0       	rjmp	.+226    	; 0x108 <__bad_interrupt>
  26:	00 00       	nop
  28:	6f c0       	rjmp	.+222    	; 0x108 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	6d c0       	rjmp	.+218    	; 0x108 <__bad_interrupt>
  2e:	00 00       	nop
  30:	6b c0       	rjmp	.+214    	; 0x108 <__bad_interrupt>
  32:	00 00       	nop
  34:	69 c0       	rjmp	.+210    	; 0x108 <__bad_interrupt>
  36:	00 00       	nop
  38:	67 c0       	rjmp	.+206    	; 0x108 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	65 c0       	rjmp	.+202    	; 0x108 <__bad_interrupt>
  3e:	00 00       	nop
  40:	63 c0       	rjmp	.+198    	; 0x108 <__bad_interrupt>
  42:	00 00       	nop
  44:	61 c0       	rjmp	.+194    	; 0x108 <__bad_interrupt>
  46:	00 00       	nop
  48:	5f c0       	rjmp	.+190    	; 0x108 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	5d c0       	rjmp	.+186    	; 0x108 <__bad_interrupt>
  4e:	00 00       	nop
  50:	5b c0       	rjmp	.+182    	; 0x108 <__bad_interrupt>
  52:	00 00       	nop
  54:	59 c0       	rjmp	.+178    	; 0x108 <__bad_interrupt>
  56:	00 00       	nop
  58:	57 c0       	rjmp	.+174    	; 0x108 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	55 c0       	rjmp	.+170    	; 0x108 <__bad_interrupt>
  5e:	00 00       	nop
  60:	53 c0       	rjmp	.+166    	; 0x108 <__bad_interrupt>
  62:	00 00       	nop
  64:	51 c0       	rjmp	.+162    	; 0x108 <__bad_interrupt>
  66:	00 00       	nop
  68:	4f c0       	rjmp	.+158    	; 0x108 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	4d c0       	rjmp	.+154    	; 0x108 <__bad_interrupt>
  6e:	00 00       	nop
  70:	4b c0       	rjmp	.+150    	; 0x108 <__bad_interrupt>
  72:	00 00       	nop
  74:	05 c3       	rjmp	.+1546   	; 0x680 <__vector_29>
  76:	00 00       	nop
  78:	47 c0       	rjmp	.+142    	; 0x108 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	45 c0       	rjmp	.+138    	; 0x108 <__bad_interrupt>
  7e:	00 00       	nop
  80:	43 c0       	rjmp	.+134    	; 0x108 <__bad_interrupt>
  82:	00 00       	nop
  84:	41 c0       	rjmp	.+130    	; 0x108 <__bad_interrupt>
  86:	00 00       	nop
  88:	3f c0       	rjmp	.+126    	; 0x108 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	3d c0       	rjmp	.+122    	; 0x108 <__bad_interrupt>
  8e:	00 00       	nop
  90:	3b c0       	rjmp	.+118    	; 0x108 <__bad_interrupt>
  92:	00 00       	nop
  94:	39 c0       	rjmp	.+114    	; 0x108 <__bad_interrupt>
  96:	00 00       	nop
  98:	37 c0       	rjmp	.+110    	; 0x108 <__bad_interrupt>
  9a:	00 00       	nop
  9c:	35 c0       	rjmp	.+106    	; 0x108 <__bad_interrupt>
  9e:	00 00       	nop
  a0:	33 c0       	rjmp	.+102    	; 0x108 <__bad_interrupt>
  a2:	00 00       	nop
  a4:	31 c0       	rjmp	.+98     	; 0x108 <__bad_interrupt>
  a6:	00 00       	nop
  a8:	2f c0       	rjmp	.+94     	; 0x108 <__bad_interrupt>
  aa:	00 00       	nop
  ac:	2d c0       	rjmp	.+90     	; 0x108 <__bad_interrupt>
  ae:	00 00       	nop
  b0:	2b c0       	rjmp	.+86     	; 0x108 <__bad_interrupt>
  b2:	00 00       	nop
  b4:	29 c0       	rjmp	.+82     	; 0x108 <__bad_interrupt>
  b6:	00 00       	nop
  b8:	27 c0       	rjmp	.+78     	; 0x108 <__bad_interrupt>
  ba:	00 00       	nop
  bc:	25 c0       	rjmp	.+74     	; 0x108 <__bad_interrupt>
  be:	00 00       	nop
  c0:	23 c0       	rjmp	.+70     	; 0x108 <__bad_interrupt>
  c2:	00 00       	nop
  c4:	21 c0       	rjmp	.+66     	; 0x108 <__bad_interrupt>
  c6:	00 00       	nop
  c8:	1f c0       	rjmp	.+62     	; 0x108 <__bad_interrupt>
  ca:	00 00       	nop
  cc:	1d c0       	rjmp	.+58     	; 0x108 <__bad_interrupt>
  ce:	00 00       	nop
  d0:	1b c0       	rjmp	.+54     	; 0x108 <__bad_interrupt>
  d2:	00 00       	nop
  d4:	19 c0       	rjmp	.+50     	; 0x108 <__bad_interrupt>
  d6:	00 00       	nop
  d8:	17 c0       	rjmp	.+46     	; 0x108 <__bad_interrupt>
  da:	00 00       	nop
  dc:	15 c0       	rjmp	.+42     	; 0x108 <__bad_interrupt>
  de:	00 00       	nop
  e0:	13 c0       	rjmp	.+38     	; 0x108 <__bad_interrupt>
	...

000000e4 <__ctors_end>:
  e4:	11 24       	eor	r1, r1
  e6:	1f be       	out	0x3f, r1	; 63
  e8:	cf ef       	ldi	r28, 0xFF	; 255
  ea:	d1 e2       	ldi	r29, 0x21	; 33
  ec:	de bf       	out	0x3e, r29	; 62
  ee:	cd bf       	out	0x3d, r28	; 61
  f0:	00 e0       	ldi	r16, 0x00	; 0
  f2:	0c bf       	out	0x3c, r16	; 60

000000f4 <__do_clear_bss>:
  f4:	22 e0       	ldi	r18, 0x02	; 2
  f6:	a0 e0       	ldi	r26, 0x00	; 0
  f8:	b2 e0       	ldi	r27, 0x02	; 2
  fa:	01 c0       	rjmp	.+2      	; 0xfe <.do_clear_bss_start>

000000fc <.do_clear_bss_loop>:
  fc:	1d 92       	st	X+, r1

000000fe <.do_clear_bss_start>:
  fe:	ac 31       	cpi	r26, 0x1C	; 28
 100:	b2 07       	cpc	r27, r18
 102:	e1 f7       	brne	.-8      	; 0xfc <.do_clear_bss_loop>
 104:	5d d1       	rcall	.+698    	; 0x3c0 <main>
 106:	6f c4       	rjmp	.+2270   	; 0x9e6 <_exit>

00000108 <__bad_interrupt>:
 108:	7b cf       	rjmp	.-266    	; 0x0 <__vectors>

0000010a <Lcd_PortConfig>:
#define LCD_RW 1
#define LCD_EN 2

void Lcd_PortConfig(void)
{
	LcdDataBusDirnReg = 0xFF; //POrt as Output
 10a:	8f ef       	ldi	r24, 0xFF	; 255
 10c:	81 b9       	out	0x01, r24	; 1
 10e:	08 95       	ret

00000110 <Lcd_CmdWrite>:
}

void Lcd_CmdWrite(char cmd)
{
	LcdDataBus = (cmd & 0xF0);    //Set upper 4 bits of the cmd
 110:	98 2f       	mov	r25, r24
 112:	90 7f       	andi	r25, 0xF0	; 240
 114:	92 b9       	out	0x02, r25	; 2
	LcdControlBus &= ~(1<<LCD_RS);//Set RS pin to LOW
 116:	92 b1       	in	r25, 0x02	; 2
 118:	9e 7f       	andi	r25, 0xFE	; 254
 11a:	92 b9       	out	0x02, r25	; 2
	LcdControlBus &= ~(1<<LCD_RW);//Set RW pin to LOW
 11c:	92 b1       	in	r25, 0x02	; 2
 11e:	9d 7f       	andi	r25, 0xFD	; 253
 120:	92 b9       	out	0x02, r25	; 2
	LcdControlBus |= (1<<LCD_EN); //Generate High-to-Low pulse
 122:	92 b1       	in	r25, 0x02	; 2
 124:	94 60       	ori	r25, 0x04	; 4
 126:	92 b9       	out	0x02, r25	; 2
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 128:	ef e3       	ldi	r30, 0x3F	; 63
 12a:	fc e9       	ldi	r31, 0x9C	; 156
 12c:	31 97       	sbiw	r30, 0x01	; 1
 12e:	f1 f7       	brne	.-4      	; 0x12c <Lcd_CmdWrite+0x1c>
 130:	00 c0       	rjmp	.+0      	; 0x132 <Lcd_CmdWrite+0x22>
 132:	00 00       	nop
	_delay_ms(10);
	LcdControlBus &= ~(1<<LCD_EN);
 134:	92 b1       	in	r25, 0x02	; 2
 136:	9b 7f       	andi	r25, 0xFB	; 251
 138:	92 b9       	out	0x02, r25	; 2
 13a:	ef e3       	ldi	r30, 0x3F	; 63
 13c:	fc e9       	ldi	r31, 0x9C	; 156
 13e:	31 97       	sbiw	r30, 0x01	; 1
 140:	f1 f7       	brne	.-4      	; 0x13e <Lcd_CmdWrite+0x2e>
 142:	00 c0       	rjmp	.+0      	; 0x144 <Lcd_CmdWrite+0x34>
 144:	00 00       	nop
	
	_delay_ms(10);
	
	LcdDataBus = ((cmd<<4) & 0xF0);    //Set lower 4 bits of the cmd
 146:	f0 e1       	ldi	r31, 0x10	; 16
 148:	8f 9f       	mul	r24, r31
 14a:	c0 01       	movw	r24, r0
 14c:	11 24       	eor	r1, r1
 14e:	82 b9       	out	0x02, r24	; 2
	LcdControlBus &= ~(1<<LCD_RS);//Set RS pin to LOW
 150:	82 b1       	in	r24, 0x02	; 2
 152:	8e 7f       	andi	r24, 0xFE	; 254
 154:	82 b9       	out	0x02, r24	; 2
	LcdControlBus &= ~(1<<LCD_RW);//Set RW pin to LOW
 156:	82 b1       	in	r24, 0x02	; 2
 158:	8d 7f       	andi	r24, 0xFD	; 253
 15a:	82 b9       	out	0x02, r24	; 2
	LcdControlBus |= (1<<LCD_EN); //Generate High-to-Low pulse
 15c:	82 b1       	in	r24, 0x02	; 2
 15e:	84 60       	ori	r24, 0x04	; 4
 160:	82 b9       	out	0x02, r24	; 2
 162:	8f e3       	ldi	r24, 0x3F	; 63
 164:	9c e9       	ldi	r25, 0x9C	; 156
 166:	01 97       	sbiw	r24, 0x01	; 1
 168:	f1 f7       	brne	.-4      	; 0x166 <Lcd_CmdWrite+0x56>
 16a:	00 c0       	rjmp	.+0      	; 0x16c <Lcd_CmdWrite+0x5c>
 16c:	00 00       	nop
	_delay_ms(10);
	LcdControlBus &= ~(1<<LCD_EN);
 16e:	82 b1       	in	r24, 0x02	; 2
 170:	8b 7f       	andi	r24, 0xFB	; 251
 172:	82 b9       	out	0x02, r24	; 2
 174:	ef e3       	ldi	r30, 0x3F	; 63
 176:	fc e9       	ldi	r31, 0x9C	; 156
 178:	31 97       	sbiw	r30, 0x01	; 1
 17a:	f1 f7       	brne	.-4      	; 0x178 <Lcd_CmdWrite+0x68>
 17c:	00 c0       	rjmp	.+0      	; 0x17e <Lcd_CmdWrite+0x6e>
 17e:	00 00       	nop
 180:	08 95       	ret

00000182 <Lcd_DataWrite>:
	_delay_ms(10);
}

void Lcd_DataWrite(char dat)
{
	LcdDataBus = (dat & 0xF0);    //Set upper 4 bits of the data
 182:	98 2f       	mov	r25, r24
 184:	90 7f       	andi	r25, 0xF0	; 240
 186:	92 b9       	out	0x02, r25	; 2
	LcdControlBus |= (1<<LCD_RS);//Set RS pin to High
 188:	92 b1       	in	r25, 0x02	; 2
 18a:	91 60       	ori	r25, 0x01	; 1
 18c:	92 b9       	out	0x02, r25	; 2
	LcdControlBus &= ~(1<<LCD_RW);//Set RW pin to LOW
 18e:	92 b1       	in	r25, 0x02	; 2
 190:	9d 7f       	andi	r25, 0xFD	; 253
 192:	92 b9       	out	0x02, r25	; 2
	LcdControlBus |= (1<<LCD_EN); //Generate High-to-Low pulse
 194:	92 b1       	in	r25, 0x02	; 2
 196:	94 60       	ori	r25, 0x04	; 4
 198:	92 b9       	out	0x02, r25	; 2
 19a:	ef e3       	ldi	r30, 0x3F	; 63
 19c:	fc e9       	ldi	r31, 0x9C	; 156
 19e:	31 97       	sbiw	r30, 0x01	; 1
 1a0:	f1 f7       	brne	.-4      	; 0x19e <Lcd_DataWrite+0x1c>
 1a2:	00 c0       	rjmp	.+0      	; 0x1a4 <Lcd_DataWrite+0x22>
 1a4:	00 00       	nop
	_delay_ms(10);
	LcdControlBus &= ~(1<<LCD_EN);
 1a6:	92 b1       	in	r25, 0x02	; 2
 1a8:	9b 7f       	andi	r25, 0xFB	; 251
 1aa:	92 b9       	out	0x02, r25	; 2
 1ac:	ef e3       	ldi	r30, 0x3F	; 63
 1ae:	fc e9       	ldi	r31, 0x9C	; 156
 1b0:	31 97       	sbiw	r30, 0x01	; 1
 1b2:	f1 f7       	brne	.-4      	; 0x1b0 <Lcd_DataWrite+0x2e>
 1b4:	00 c0       	rjmp	.+0      	; 0x1b6 <Lcd_DataWrite+0x34>
 1b6:	00 00       	nop
	
	_delay_ms(10);
	
	LcdDataBus = ((dat<<4) & 0xF0);    //Set lower 4 bits of the data
 1b8:	f0 e1       	ldi	r31, 0x10	; 16
 1ba:	8f 9f       	mul	r24, r31
 1bc:	c0 01       	movw	r24, r0
 1be:	11 24       	eor	r1, r1
 1c0:	82 b9       	out	0x02, r24	; 2
	LcdControlBus |= (1<<LCD_RS);//Set RS pin to HIGH
 1c2:	82 b1       	in	r24, 0x02	; 2
 1c4:	81 60       	ori	r24, 0x01	; 1
 1c6:	82 b9       	out	0x02, r24	; 2
	LcdControlBus &= ~(1<<LCD_RW);//Set RW pin to LOW
 1c8:	82 b1       	in	r24, 0x02	; 2
 1ca:	8d 7f       	andi	r24, 0xFD	; 253
 1cc:	82 b9       	out	0x02, r24	; 2
	LcdControlBus |= (1<<LCD_EN); //Generate High-to-Low pulse
 1ce:	82 b1       	in	r24, 0x02	; 2
 1d0:	84 60       	ori	r24, 0x04	; 4
 1d2:	82 b9       	out	0x02, r24	; 2
 1d4:	8f e3       	ldi	r24, 0x3F	; 63
 1d6:	9c e9       	ldi	r25, 0x9C	; 156
 1d8:	01 97       	sbiw	r24, 0x01	; 1
 1da:	f1 f7       	brne	.-4      	; 0x1d8 <Lcd_DataWrite+0x56>
 1dc:	00 c0       	rjmp	.+0      	; 0x1de <Lcd_DataWrite+0x5c>
 1de:	00 00       	nop
	_delay_ms(10);
	LcdControlBus &= ~(1<<LCD_EN);
 1e0:	82 b1       	in	r24, 0x02	; 2
 1e2:	8b 7f       	andi	r24, 0xFB	; 251
 1e4:	82 b9       	out	0x02, r24	; 2
 1e6:	ef e3       	ldi	r30, 0x3F	; 63
 1e8:	fc e9       	ldi	r31, 0x9C	; 156
 1ea:	31 97       	sbiw	r30, 0x01	; 1
 1ec:	f1 f7       	brne	.-4      	; 0x1ea <Lcd_DataWrite+0x68>
 1ee:	00 c0       	rjmp	.+0      	; 0x1f0 <Lcd_DataWrite+0x6e>
 1f0:	00 00       	nop
 1f2:	08 95       	ret

000001f4 <Lcd_init>:
	_delay_ms(10);
}

void Lcd_init(void)
{
	Lcd_CmdWrite(0x02); //Initialize Lcd in 4-bit mode
 1f4:	82 e0       	ldi	r24, 0x02	; 2
 1f6:	8c df       	rcall	.-232    	; 0x110 <Lcd_CmdWrite>
	Lcd_CmdWrite(0x28); //enable 5x7 mode for chars
 1f8:	88 e2       	ldi	r24, 0x28	; 40
 1fa:	8a df       	rcall	.-236    	; 0x110 <Lcd_CmdWrite>
	Lcd_CmdWrite(0x0E); //Display OFF, Cursor ON
 1fc:	8e e0       	ldi	r24, 0x0E	; 14
 1fe:	88 df       	rcall	.-240    	; 0x110 <Lcd_CmdWrite>
	Lcd_CmdWrite(0x01); //Clear Display
 200:	81 e0       	ldi	r24, 0x01	; 1
 202:	86 cf       	rjmp	.-244    	; 0x110 <Lcd_CmdWrite>
 204:	08 95       	ret

00000206 <setCursorLine>:
 206:	fc 01       	movw	r30, r24

}

void setCursorLine(unsigned* myIndex)
{
	if (!(*myIndex % 32)){
 208:	20 81       	ld	r18, Z
 20a:	31 81       	ldd	r19, Z+1	; 0x01
 20c:	a9 01       	movw	r20, r18
 20e:	4f 71       	andi	r20, 0x1F	; 31
 210:	55 27       	eor	r21, r21
 212:	45 2b       	or	r20, r21
 214:	39 f4       	brne	.+14     	; 0x224 <setCursorLine+0x1e>
		*myIndex = 0;
 216:	11 82       	std	Z+1, r1	; 0x01
 218:	10 82       	st	Z, r1
		Lcd_CmdWrite(0x01); // Clear Display
 21a:	81 e0       	ldi	r24, 0x01	; 1
 21c:	79 df       	rcall	.-270    	; 0x110 <Lcd_CmdWrite>
		Lcd_CmdWrite(0x80); // Set cursor to Row 1 Column 1
 21e:	80 e8       	ldi	r24, 0x80	; 128
 220:	77 cf       	rjmp	.-274    	; 0x110 <Lcd_CmdWrite>
 222:	08 95       	ret
		}else if (!(*myIndex % 16)){
 224:	2f 70       	andi	r18, 0x0F	; 15
 226:	33 27       	eor	r19, r19
 228:	23 2b       	or	r18, r19
		Lcd_CmdWrite(0xC0);
 22a:	11 f4       	brne	.+4      	; 0x230 <setCursorLine+0x2a>
 22c:	80 ec       	ldi	r24, 0xC0	; 192
 22e:	70 cf       	rjmp	.-288    	; 0x110 <Lcd_CmdWrite>
 230:	08 95       	ret

00000232 <Button>:
int y=0;
double max1=0;
double max3=0;
int d=0;

int Button(void){return (PIND & 0B00000001);}
 232:	89 b1       	in	r24, 0x09	; 9
 234:	81 70       	andi	r24, 0x01	; 1
 236:	90 e0       	ldi	r25, 0x00	; 0
 238:	08 95       	ret

0000023a <initUSART>:
	return rms;
}*/

void initUSART(void)
{
	UBRR0H = (unsigned char)(UBBR_VALUE>>8);
 23a:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7c00c5>
	UBRR0L = (unsigned char)(UBBR_VALUE);
 23e:	87 e6       	ldi	r24, 0x67	; 103
 240:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7c00c4>
	UCSR0B = (1<<TXEN0);
 244:	88 e0       	ldi	r24, 0x08	; 8
 246:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7c00c1>
	UCSR0C = (3<<UCSZ00);
 24a:	86 e0       	ldi	r24, 0x06	; 6
 24c:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7c00c2>
	sei();
 250:	78 94       	sei
 252:	08 95       	ret

00000254 <transmitUSART>:
}

void transmitUSART(unsigned char data)
{
	while(!(UCSR0A & (1<<UDRE0)));
 254:	90 91 c0 00 	lds	r25, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7c00c0>
 258:	95 ff       	sbrs	r25, 5
 25a:	fc cf       	rjmp	.-8      	; 0x254 <transmitUSART>
	UDR0 =data;
 25c:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7c00c6>
 260:	08 95       	ret

00000262 <initHardware>:
	}
}

void initHardware(void)
{
	DDRD &= 0B11111110;
 262:	8a b1       	in	r24, 0x0a	; 10
 264:	8e 7f       	andi	r24, 0xFE	; 254
 266:	8a b9       	out	0x0a, r24	; 10
	DDRD |= 0B00000010;
 268:	8a b1       	in	r24, 0x0a	; 10
 26a:	82 60       	ori	r24, 0x02	; 2
 26c:	8a b9       	out	0x0a, r24	; 10
	Lcd_PortConfig();
 26e:	4d cf       	rjmp	.-358    	; 0x10a <Lcd_PortConfig>
 270:	08 95       	ret

00000272 <configFreeRunningADC1>:
}

void configFreeRunningADC1(uint16_t channel)
{
	ADMUX = (ADMUX & 0x0F) | channel; // Channel 03 (ADC3)
 272:	ec e7       	ldi	r30, 0x7C	; 124
 274:	f0 e0       	ldi	r31, 0x00	; 0
 276:	90 81       	ld	r25, Z
 278:	9f 70       	andi	r25, 0x0F	; 15
 27a:	89 2b       	or	r24, r25
 27c:	80 83       	st	Z, r24
	ADCSRB = 0B00000000;
 27e:	10 92 7b 00 	sts	0x007B, r1	; 0x80007b <__TEXT_REGION_LENGTH__+0x7c007b>
	ADCSRA = 0B11101111; // Enable ADC and set auto-triggering, use prescaler 128
 282:	ea e7       	ldi	r30, 0x7A	; 122
 284:	f0 e0       	ldi	r31, 0x00	; 0
 286:	8f ee       	ldi	r24, 0xEF	; 239
 288:	80 83       	st	Z, r24
	ADCSRA |= (1 << ADATE); // Enable auto-triggering (free-running mode)
 28a:	80 81       	ld	r24, Z
 28c:	80 62       	ori	r24, 0x20	; 32
 28e:	80 83       	st	Z, r24
	ADCSRA |= (1 << ADIE); // Enable ADC interrupt
 290:	80 81       	ld	r24, Z
 292:	88 60       	ori	r24, 0x08	; 8
 294:	80 83       	st	Z, r24
	ADCSRA |= (1 << ADSC); // Start the first ADC conversion
 296:	80 81       	ld	r24, Z
 298:	80 64       	ori	r24, 0x40	; 64
 29a:	80 83       	st	Z, r24
	sei();
 29c:	78 94       	sei
 29e:	08 95       	ret

000002a0 <display>:
}

void display(int adc3Value, int adc2Value)
{
 2a0:	bf 92       	push	r11
 2a2:	cf 92       	push	r12
 2a4:	df 92       	push	r13
 2a6:	ef 92       	push	r14
 2a8:	ff 92       	push	r15
 2aa:	0f 93       	push	r16
 2ac:	1f 93       	push	r17
 2ae:	cf 93       	push	r28
 2b0:	df 93       	push	r29
 2b2:	1f 92       	push	r1
 2b4:	1f 92       	push	r1
 2b6:	cd b7       	in	r28, 0x3d	; 61
 2b8:	de b7       	in	r29, 0x3e	; 62
 2ba:	08 2f       	mov	r16, r24
 2bc:	d9 2e       	mov	r13, r25
 2be:	16 2f       	mov	r17, r22
 2c0:	c7 2e       	mov	r12, r23
	int index = 0;
 2c2:	1a 82       	std	Y+2, r1	; 0x02
 2c4:	19 82       	std	Y+1, r1	; 0x01
	
	if (k == 0) {
 2c6:	80 91 12 02 	lds	r24, 0x0212	; 0x800212 <k>
 2ca:	90 91 13 02 	lds	r25, 0x0213	; 0x800213 <k+0x1>
 2ce:	89 2b       	or	r24, r25
 2d0:	d9 f4       	brne	.+54     	; 0x308 <display+0x68>
		setCursorLine(&index);
 2d2:	ce 01       	movw	r24, r28
 2d4:	01 96       	adiw	r24, 0x01	; 1
 2d6:	97 df       	rcall	.-210    	; 0x206 <setCursorLine>
		Lcd_CmdWrite(0x80 + 0);
 2d8:	80 e8       	ldi	r24, 0x80	; 128
 2da:	1a df       	rcall	.-460    	; 0x110 <Lcd_CmdWrite>
		Lcd_DataWrite('V');
 2dc:	86 e5       	ldi	r24, 0x56	; 86
 2de:	51 df       	rcall	.-350    	; 0x182 <Lcd_DataWrite>
		Lcd_DataWrite('r');
 2e0:	82 e7       	ldi	r24, 0x72	; 114
 2e2:	4f df       	rcall	.-354    	; 0x182 <Lcd_DataWrite>
		Lcd_DataWrite('m');
 2e4:	8d e6       	ldi	r24, 0x6D	; 109
 2e6:	4d df       	rcall	.-358    	; 0x182 <Lcd_DataWrite>
		Lcd_DataWrite('s');
 2e8:	83 e7       	ldi	r24, 0x73	; 115
 2ea:	4b df       	rcall	.-362    	; 0x182 <Lcd_DataWrite>
		Lcd_DataWrite('=');
 2ec:	8d e3       	ldi	r24, 0x3D	; 61
 2ee:	49 df       	rcall	.-366    	; 0x182 <Lcd_DataWrite>
		
		Lcd_CmdWrite(0xc0 + 0);
 2f0:	80 ec       	ldi	r24, 0xC0	; 192
 2f2:	0e df       	rcall	.-484    	; 0x110 <Lcd_CmdWrite>
		Lcd_DataWrite('I');
 2f4:	89 e4       	ldi	r24, 0x49	; 73
 2f6:	45 df       	rcall	.-374    	; 0x182 <Lcd_DataWrite>
		Lcd_DataWrite('r');
 2f8:	82 e7       	ldi	r24, 0x72	; 114
 2fa:	43 df       	rcall	.-378    	; 0x182 <Lcd_DataWrite>
 2fc:	8d e6       	ldi	r24, 0x6D	; 109
		Lcd_DataWrite('m');
 2fe:	41 df       	rcall	.-382    	; 0x182 <Lcd_DataWrite>
 300:	83 e7       	ldi	r24, 0x73	; 115
		Lcd_DataWrite('s');
 302:	3f df       	rcall	.-386    	; 0x182 <Lcd_DataWrite>
 304:	8d e3       	ldi	r24, 0x3D	; 61
		Lcd_DataWrite('=');
 306:	3d df       	rcall	.-390    	; 0x182 <Lcd_DataWrite>
 308:	86 e0       	ldi	r24, 0x06	; 6
 30a:	90 e0       	ldi	r25, 0x00	; 0
		
		
	}

	index = 6;
 30c:	9a 83       	std	Y+2, r25	; 0x02
 30e:	89 83       	std	Y+1, r24	; 0x01
 310:	ce 01       	movw	r24, r28
 312:	01 96       	adiw	r24, 0x01	; 1
	setCursorLine(&index);
 314:	78 df       	rcall	.-272    	; 0x206 <setCursorLine>
 316:	86 e8       	ldi	r24, 0x86	; 134
 318:	fb de       	rcall	.-522    	; 0x110 <Lcd_CmdWrite>
	Lcd_CmdWrite(0x80 + 6);
 31a:	0f 2e       	mov	r0, r31
 31c:	f8 ee       	ldi	r31, 0xE8	; 232
 31e:	ef 2e       	mov	r14, r31
	// Update the new adc2Value
	int value = adc2Value;
	for (int i = 1000; i > 0; i /= 10) {
 320:	f3 e0       	ldi	r31, 0x03	; 3
 322:	ff 2e       	mov	r15, r31
 324:	f0 2d       	mov	r31, r0
 326:	13 c0       	rjmp	.+38     	; 0x34e <display+0xae>
 328:	81 2f       	mov	r24, r17
		int digit = value / i;
 32a:	9c 2d       	mov	r25, r12
 32c:	b7 01       	movw	r22, r14
 32e:	34 d3       	rcall	.+1640   	; 0x998 <__divmodhi4>
 330:	c8 2e       	mov	r12, r24
 332:	b9 2e       	mov	r11, r25
 334:	10 e3       	ldi	r17, 0x30	; 48
		Lcd_DataWrite(digit + '0');
 336:	16 0f       	add	r17, r22
 338:	81 2f       	mov	r24, r17
 33a:	23 df       	rcall	.-442    	; 0x182 <Lcd_DataWrite>
 33c:	81 2f       	mov	r24, r17
 33e:	8a df       	rcall	.-236    	; 0x254 <transmitUSART>
		transmitUSART(digit + '0');
 340:	1c 2d       	mov	r17, r12
 342:	cb 2c       	mov	r12, r11
		value %= i;
 344:	c7 01       	movw	r24, r14
	index = 6;
	setCursorLine(&index);
	Lcd_CmdWrite(0x80 + 6);
	// Update the new adc2Value
	int value = adc2Value;
	for (int i = 1000; i > 0; i /= 10) {
 346:	6a e0       	ldi	r22, 0x0A	; 10
 348:	70 e0       	ldi	r23, 0x00	; 0
 34a:	26 d3       	rcall	.+1612   	; 0x998 <__divmodhi4>
 34c:	7b 01       	movw	r14, r22
 34e:	1e 14       	cp	r1, r14
 350:	1f 04       	cpc	r1, r15
 352:	54 f3       	brlt	.-44     	; 0x328 <display+0x88>
 354:	86 e1       	ldi	r24, 0x16	; 22
 356:	90 e0       	ldi	r25, 0x00	; 0
		transmitUSART(digit + '0');
		value %= i;
	}

	// Keep cursor at position 22
	index = 22;
 358:	9a 83       	std	Y+2, r25	; 0x02
 35a:	89 83       	std	Y+1, r24	; 0x01
 35c:	ce 01       	movw	r24, r28
	setCursorLine(&index);
 35e:	01 96       	adiw	r24, 0x01	; 1
 360:	52 df       	rcall	.-348    	; 0x206 <setCursorLine>
 362:	86 ec       	ldi	r24, 0xC6	; 198
	Lcd_CmdWrite(0xC0 + 6);
 364:	d5 de       	rcall	.-598    	; 0x110 <Lcd_CmdWrite>
 366:	0f 2e       	mov	r0, r31
	// Update the new adc3Value
	value = adc3Value;
	for (int i = 1000; i > 0; i /= 10) {
 368:	f8 ee       	ldi	r31, 0xE8	; 232
 36a:	ef 2e       	mov	r14, r31
 36c:	f3 e0       	ldi	r31, 0x03	; 3
 36e:	ff 2e       	mov	r15, r31
 370:	f0 2d       	mov	r31, r0
 372:	11 c0       	rjmp	.+34     	; 0x396 <display+0xf6>
		int digit = value / i;
 374:	80 2f       	mov	r24, r16
 376:	9d 2d       	mov	r25, r13
 378:	b7 01       	movw	r22, r14
 37a:	0e d3       	rcall	.+1564   	; 0x998 <__divmodhi4>
 37c:	08 2f       	mov	r16, r24
 37e:	d9 2e       	mov	r13, r25
 380:	10 e3       	ldi	r17, 0x30	; 48
		Lcd_DataWrite(digit + '0');
 382:	16 0f       	add	r17, r22
 384:	81 2f       	mov	r24, r17
 386:	fd de       	rcall	.-518    	; 0x182 <Lcd_DataWrite>
 388:	81 2f       	mov	r24, r17
 38a:	64 df       	rcall	.-312    	; 0x254 <transmitUSART>
		transmitUSART(digit + '0');
 38c:	c7 01       	movw	r24, r14
 38e:	6a e0       	ldi	r22, 0x0A	; 10
 390:	70 e0       	ldi	r23, 0x00	; 0
	index = 22;
	setCursorLine(&index);
	Lcd_CmdWrite(0xC0 + 6);
	// Update the new adc3Value
	value = adc3Value;
	for (int i = 1000; i > 0; i /= 10) {
 392:	02 d3       	rcall	.+1540   	; 0x998 <__divmodhi4>
 394:	7b 01       	movw	r14, r22
 396:	1e 14       	cp	r1, r14
 398:	1f 04       	cpc	r1, r15
 39a:	64 f3       	brlt	.-40     	; 0x374 <display+0xd4>
 39c:	81 e0       	ldi	r24, 0x01	; 1
 39e:	90 e0       	ldi	r25, 0x00	; 0
 3a0:	90 93 13 02 	sts	0x0213, r25	; 0x800213 <k+0x1>
		Lcd_DataWrite(digit + '0');
		transmitUSART(digit + '0');
		value %= i;
	}

	k = 1;
 3a4:	80 93 12 02 	sts	0x0212, r24	; 0x800212 <k>
 3a8:	0f 90       	pop	r0
 3aa:	0f 90       	pop	r0
 3ac:	df 91       	pop	r29
 3ae:	cf 91       	pop	r28
}
 3b0:	1f 91       	pop	r17
 3b2:	0f 91       	pop	r16
 3b4:	ff 90       	pop	r15
 3b6:	ef 90       	pop	r14
 3b8:	df 90       	pop	r13
 3ba:	cf 90       	pop	r12
 3bc:	bf 90       	pop	r11
 3be:	08 95       	ret

000003c0 <main>:
 3c0:	50 df       	rcall	.-352    	; 0x262 <initHardware>
 3c2:	18 df       	rcall	.-464    	; 0x1f4 <Lcd_init>
 3c4:	8f ef       	ldi	r24, 0xFF	; 255
 3c6:	81 b9       	out	0x01, r24	; 1

int main(void)
{
	initHardware();
	Lcd_init();
	LcdDataBusDirnReg = 0xFF;
 3c8:	82 e0       	ldi	r24, 0x02	; 2
	//configFreeRunningADC2();
	configFreeRunningADC1(0x02);
 3ca:	90 e0       	ldi	r25, 0x00	; 0
 3cc:	52 df       	rcall	.-348    	; 0x272 <configFreeRunningADC1>
 3ce:	83 e0       	ldi	r24, 0x03	; 3
	configFreeRunningADC1(0x03);
 3d0:	90 e0       	ldi	r25, 0x00	; 0
 3d2:	4f df       	rcall	.-354    	; 0x272 <configFreeRunningADC1>
 3d4:	32 df       	rcall	.-412    	; 0x23a <initUSART>
	initUSART();
 3d6:	80 91 0c 02 	lds	r24, 0x020C	; 0x80020c <adcValueChanged>
	
	while (1)
	{
		// Display the updated ADC value only if it has changed
		if (adcValueChanged)
 3da:	90 91 0d 02 	lds	r25, 0x020D	; 0x80020d <adcValueChanged+0x1>
 3de:	89 2b       	or	r24, r25
 3e0:	d1 f3       	breq	.-12     	; 0x3d6 <main+0x16>
 3e2:	60 91 18 02 	lds	r22, 0x0218	; 0x800218 <current>
		{
			display(volt,current);
 3e6:	70 91 19 02 	lds	r23, 0x0219	; 0x800219 <current+0x1>
 3ea:	80 91 1a 02 	lds	r24, 0x021A	; 0x80021a <volt>
 3ee:	90 91 1b 02 	lds	r25, 0x021B	; 0x80021b <volt+0x1>
 3f2:	56 df       	rcall	.-340    	; 0x2a0 <display>
 3f4:	1e df       	rcall	.-452    	; 0x232 <Button>
			if(Button()){
 3f6:	89 2b       	or	r24, r25
 3f8:	21 f0       	breq	.+8      	; 0x402 <__LOCK_REGION_LENGTH__+0x2>
 3fa:	8b b1       	in	r24, 0x0b	; 11
 3fc:	82 60       	ori	r24, 0x02	; 2
				PORTD |= 0B00000010;
 3fe:	8b b9       	out	0x0b, r24	; 11
 400:	03 c0       	rjmp	.+6      	; 0x408 <__LOCK_REGION_LENGTH__+0x8>
 402:	8b b1       	in	r24, 0x0b	; 11
 404:	8d 7f       	andi	r24, 0xFD	; 253
			}
			else{
				PORTD &= 0B11111101;
 406:	8b b9       	out	0x0b, r24	; 11
 408:	10 92 0d 02 	sts	0x020D, r1	; 0x80020d <adcValueChanged+0x1>
			}
			
			adcValueChanged=0;
 40c:	10 92 0c 02 	sts	0x020C, r1	; 0x80020c <adcValueChanged>
 410:	e2 cf       	rjmp	.-60     	; 0x3d6 <main+0x16>

00000412 <ADC3val>:
 412:	cf 92       	push	r12
 414:	df 92       	push	r13
	}
	
}

void ADC3val()
{
 416:	ef 92       	push	r14
 418:	ff 92       	push	r15
 41a:	cf 93       	push	r28
 41c:	df 93       	push	r29
	adcValue1 = ADC; // Read ADC3 value
 41e:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7c0078>
 422:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7c0079>
 426:	90 93 11 02 	sts	0x0211, r25	; 0x800211 <adcValue1+0x1>
 42a:	80 93 10 02 	sts	0x0210, r24	; 0x800210 <adcValue1>
	if((x>sampling)){
 42e:	c0 91 0a 02 	lds	r28, 0x020A	; 0x80020a <x>
 432:	d0 91 0b 02 	lds	r29, 0x020B	; 0x80020b <x+0x1>
 436:	cd 32       	cpi	r28, 0x2D	; 45
 438:	81 e0       	ldi	r24, 0x01	; 1
 43a:	d8 07       	cpc	r29, r24
 43c:	0c f4       	brge	.+2      	; 0x440 <ADC3val+0x2e>
 43e:	4e c0       	rjmp	.+156    	; 0x4dc <ADC3val+0xca>
		x=0;
 440:	10 92 0b 02 	sts	0x020B, r1	; 0x80020b <x+0x1>
 444:	10 92 0a 02 	sts	0x020A, r1	; 0x80020a <x>
		if ((max1> prevADC1Value+2)||(max1< prevADC1Value-2))
 448:	c0 91 14 02 	lds	r28, 0x0214	; 0x800214 <prevADC1Value>
 44c:	d0 91 15 02 	lds	r29, 0x0215	; 0x800215 <prevADC1Value+0x1>
 450:	be 01       	movw	r22, r28
 452:	6e 5f       	subi	r22, 0xFE	; 254
 454:	7f 4f       	sbci	r23, 0xFF	; 255
 456:	07 2e       	mov	r0, r23
 458:	00 0c       	add	r0, r0
 45a:	88 0b       	sbc	r24, r24
 45c:	99 0b       	sbc	r25, r25
 45e:	e8 d1       	rcall	.+976    	; 0x830 <__floatsisf>
 460:	c0 90 04 02 	lds	r12, 0x0204	; 0x800204 <max1>
 464:	d0 90 05 02 	lds	r13, 0x0205	; 0x800205 <max1+0x1>
 468:	e0 90 06 02 	lds	r14, 0x0206	; 0x800206 <max1+0x2>
 46c:	f0 90 07 02 	lds	r15, 0x0207	; 0x800207 <max1+0x3>
 470:	a7 01       	movw	r20, r14
 472:	96 01       	movw	r18, r12
 474:	3e d1       	rcall	.+636    	; 0x6f2 <__cmpsf2>
 476:	88 23       	and	r24, r24
 478:	7c f0       	brlt	.+30     	; 0x498 <ADC3val+0x86>
 47a:	be 01       	movw	r22, r28
 47c:	62 50       	subi	r22, 0x02	; 2
 47e:	71 09       	sbc	r23, r1
 480:	07 2e       	mov	r0, r23
 482:	00 0c       	add	r0, r0
 484:	88 0b       	sbc	r24, r24
 486:	99 0b       	sbc	r25, r25
 488:	d3 d1       	rcall	.+934    	; 0x830 <__floatsisf>
 48a:	9b 01       	movw	r18, r22
 48c:	ac 01       	movw	r20, r24
 48e:	c7 01       	movw	r24, r14
 490:	b6 01       	movw	r22, r12
 492:	2f d1       	rcall	.+606    	; 0x6f2 <__cmpsf2>
 494:	88 23       	and	r24, r24
 496:	94 f4       	brge	.+36     	; 0x4bc <ADC3val+0xaa>
		{
			adcValueChanged = 1; // Update the previous ADC3 value
 498:	81 e0       	ldi	r24, 0x01	; 1
 49a:	90 e0       	ldi	r25, 0x00	; 0
 49c:	90 93 0d 02 	sts	0x020D, r25	; 0x80020d <adcValueChanged+0x1>
 4a0:	80 93 0c 02 	sts	0x020C, r24	; 0x80020c <adcValueChanged>
			current = max1/sqrt(2);
 4a4:	23 ef       	ldi	r18, 0xF3	; 243
 4a6:	34 e0       	ldi	r19, 0x04	; 4
 4a8:	45 eb       	ldi	r20, 0xB5	; 181
 4aa:	5f e3       	ldi	r21, 0x3F	; 63
 4ac:	c7 01       	movw	r24, r14
 4ae:	b6 01       	movw	r22, r12
 4b0:	24 d1       	rcall	.+584    	; 0x6fa <__divsf3>
 4b2:	8b d1       	rcall	.+790    	; 0x7ca <__fixsfsi>
 4b4:	70 93 19 02 	sts	0x0219, r23	; 0x800219 <current+0x1>
 4b8:	60 93 18 02 	sts	0x0218, r22	; 0x800218 <current>
		}
		
		prevADC1Value = max1;
 4bc:	c7 01       	movw	r24, r14
 4be:	b6 01       	movw	r22, r12
 4c0:	84 d1       	rcall	.+776    	; 0x7ca <__fixsfsi>
 4c2:	70 93 15 02 	sts	0x0215, r23	; 0x800215 <prevADC1Value+0x1>
 4c6:	60 93 14 02 	sts	0x0214, r22	; 0x800214 <prevADC1Value>
		max1=0;
 4ca:	10 92 04 02 	sts	0x0204, r1	; 0x800204 <max1>
 4ce:	10 92 05 02 	sts	0x0205, r1	; 0x800205 <max1+0x1>
 4d2:	10 92 06 02 	sts	0x0206, r1	; 0x800206 <max1+0x2>
 4d6:	10 92 07 02 	sts	0x0207, r1	; 0x800207 <max1+0x3>
 4da:	2a c0       	rjmp	.+84     	; 0x530 <ADC3val+0x11e>
	}
	else{
		
		if(adcValue1>max1){
 4dc:	60 91 10 02 	lds	r22, 0x0210	; 0x800210 <adcValue1>
 4e0:	70 91 11 02 	lds	r23, 0x0211	; 0x800211 <adcValue1+0x1>
 4e4:	07 2e       	mov	r0, r23
 4e6:	00 0c       	add	r0, r0
 4e8:	88 0b       	sbc	r24, r24
 4ea:	99 0b       	sbc	r25, r25
 4ec:	a1 d1       	rcall	.+834    	; 0x830 <__floatsisf>
 4ee:	20 91 04 02 	lds	r18, 0x0204	; 0x800204 <max1>
 4f2:	30 91 05 02 	lds	r19, 0x0205	; 0x800205 <max1+0x1>
 4f6:	40 91 06 02 	lds	r20, 0x0206	; 0x800206 <max1+0x2>
 4fa:	50 91 07 02 	lds	r21, 0x0207	; 0x800207 <max1+0x3>
 4fe:	48 d2       	rcall	.+1168   	; 0x990 <__gesf2>
 500:	18 16       	cp	r1, r24
 502:	8c f4       	brge	.+34     	; 0x526 <ADC3val+0x114>
			max1=adcValue1;
 504:	60 91 10 02 	lds	r22, 0x0210	; 0x800210 <adcValue1>
 508:	70 91 11 02 	lds	r23, 0x0211	; 0x800211 <adcValue1+0x1>
 50c:	07 2e       	mov	r0, r23
 50e:	00 0c       	add	r0, r0
 510:	88 0b       	sbc	r24, r24
 512:	99 0b       	sbc	r25, r25
 514:	8d d1       	rcall	.+794    	; 0x830 <__floatsisf>
 516:	60 93 04 02 	sts	0x0204, r22	; 0x800204 <max1>
 51a:	70 93 05 02 	sts	0x0205, r23	; 0x800205 <max1+0x1>
 51e:	80 93 06 02 	sts	0x0206, r24	; 0x800206 <max1+0x2>
 522:	90 93 07 02 	sts	0x0207, r25	; 0x800207 <max1+0x3>
 526:	21 96       	adiw	r28, 0x01	; 1
		}
		x++;
 528:	d0 93 0b 02 	sts	0x020B, r29	; 0x80020b <x+0x1>
 52c:	c0 93 0a 02 	sts	0x020A, r28	; 0x80020a <x>
 530:	ec e7       	ldi	r30, 0x7C	; 124
		
	}
	
	ADMUX = (ADMUX & 0xF0) | 0x02; // Switch to ADC2 for the next conversion
 532:	f0 e0       	ldi	r31, 0x00	; 0
 534:	80 81       	ld	r24, Z
 536:	80 7f       	andi	r24, 0xF0	; 240
 538:	82 60       	ori	r24, 0x02	; 2
 53a:	80 83       	st	Z, r24
 53c:	df 91       	pop	r29
}
 53e:	cf 91       	pop	r28
 540:	ff 90       	pop	r15
 542:	ef 90       	pop	r14
 544:	df 90       	pop	r13
 546:	cf 90       	pop	r12
 548:	08 95       	ret

0000054a <ADC2val>:
 54a:	cf 92       	push	r12


void ADC2val()
{
 54c:	df 92       	push	r13
 54e:	ef 92       	push	r14
 550:	ff 92       	push	r15
 552:	cf 93       	push	r28
 554:	df 93       	push	r29
	adcValue2 = ADC; // Read ADC2 value
 556:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7c0078>
 55a:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7c0079>
 55e:	90 93 0f 02 	sts	0x020F, r25	; 0x80020f <adcValue2+0x1>
 562:	80 93 0e 02 	sts	0x020E, r24	; 0x80020e <adcValue2>
	if(y>=sampling ){
 566:	c0 91 08 02 	lds	r28, 0x0208	; 0x800208 <y>
 56a:	d0 91 09 02 	lds	r29, 0x0209	; 0x800209 <y+0x1>
 56e:	cc 32       	cpi	r28, 0x2C	; 44
 570:	81 e0       	ldi	r24, 0x01	; 1
 572:	d8 07       	cpc	r29, r24
 574:	0c f4       	brge	.+2      	; 0x578 <ADC2val+0x2e>
 576:	4e c0       	rjmp	.+156    	; 0x614 <ADC2val+0xca>
		y=0;
 578:	10 92 09 02 	sts	0x0209, r1	; 0x800209 <y+0x1>
 57c:	10 92 08 02 	sts	0x0208, r1	; 0x800208 <y>
		if((max3 >prevADC2Value+1)||((max3 <prevADC2Value-1))){
 580:	c0 91 16 02 	lds	r28, 0x0216	; 0x800216 <prevADC2Value>
 584:	d0 91 17 02 	lds	r29, 0x0217	; 0x800217 <prevADC2Value+0x1>
 588:	be 01       	movw	r22, r28
 58a:	6f 5f       	subi	r22, 0xFF	; 255
 58c:	7f 4f       	sbci	r23, 0xFF	; 255
 58e:	07 2e       	mov	r0, r23
 590:	00 0c       	add	r0, r0
 592:	88 0b       	sbc	r24, r24
 594:	99 0b       	sbc	r25, r25
 596:	4c d1       	rcall	.+664    	; 0x830 <__floatsisf>
 598:	c0 90 00 02 	lds	r12, 0x0200	; 0x800200 <__DATA_REGION_ORIGIN__>
 59c:	d0 90 01 02 	lds	r13, 0x0201	; 0x800201 <__DATA_REGION_ORIGIN__+0x1>
 5a0:	e0 90 02 02 	lds	r14, 0x0202	; 0x800202 <__DATA_REGION_ORIGIN__+0x2>
 5a4:	f0 90 03 02 	lds	r15, 0x0203	; 0x800203 <__DATA_REGION_ORIGIN__+0x3>
 5a8:	a7 01       	movw	r20, r14
 5aa:	96 01       	movw	r18, r12
 5ac:	a2 d0       	rcall	.+324    	; 0x6f2 <__cmpsf2>
 5ae:	88 23       	and	r24, r24
 5b0:	7c f0       	brlt	.+30     	; 0x5d0 <ADC2val+0x86>
 5b2:	be 01       	movw	r22, r28
 5b4:	61 50       	subi	r22, 0x01	; 1
 5b6:	71 09       	sbc	r23, r1
 5b8:	07 2e       	mov	r0, r23
 5ba:	00 0c       	add	r0, r0
 5bc:	88 0b       	sbc	r24, r24
 5be:	99 0b       	sbc	r25, r25
 5c0:	37 d1       	rcall	.+622    	; 0x830 <__floatsisf>
 5c2:	9b 01       	movw	r18, r22
 5c4:	ac 01       	movw	r20, r24
 5c6:	c7 01       	movw	r24, r14
 5c8:	b6 01       	movw	r22, r12
 5ca:	93 d0       	rcall	.+294    	; 0x6f2 <__cmpsf2>
 5cc:	88 23       	and	r24, r24
 5ce:	94 f4       	brge	.+36     	; 0x5f4 <ADC2val+0xaa>
			adcValueChanged = 1;
 5d0:	81 e0       	ldi	r24, 0x01	; 1
 5d2:	90 e0       	ldi	r25, 0x00	; 0
 5d4:	90 93 0d 02 	sts	0x020D, r25	; 0x80020d <adcValueChanged+0x1>
 5d8:	80 93 0c 02 	sts	0x020C, r24	; 0x80020c <adcValueChanged>
			volt=max3/sqrt(2);
 5dc:	23 ef       	ldi	r18, 0xF3	; 243
 5de:	34 e0       	ldi	r19, 0x04	; 4
 5e0:	45 eb       	ldi	r20, 0xB5	; 181
 5e2:	5f e3       	ldi	r21, 0x3F	; 63
 5e4:	c7 01       	movw	r24, r14
 5e6:	b6 01       	movw	r22, r12
 5e8:	88 d0       	rcall	.+272    	; 0x6fa <__divsf3>
 5ea:	ef d0       	rcall	.+478    	; 0x7ca <__fixsfsi>
 5ec:	70 93 1b 02 	sts	0x021B, r23	; 0x80021b <volt+0x1>
 5f0:	60 93 1a 02 	sts	0x021A, r22	; 0x80021a <volt>
		}
		prevADC2Value =max3;
 5f4:	c7 01       	movw	r24, r14
 5f6:	b6 01       	movw	r22, r12
 5f8:	e8 d0       	rcall	.+464    	; 0x7ca <__fixsfsi>
 5fa:	70 93 17 02 	sts	0x0217, r23	; 0x800217 <prevADC2Value+0x1>
 5fe:	60 93 16 02 	sts	0x0216, r22	; 0x800216 <prevADC2Value>
		max3 =0;
 602:	10 92 00 02 	sts	0x0200, r1	; 0x800200 <__DATA_REGION_ORIGIN__>
 606:	10 92 01 02 	sts	0x0201, r1	; 0x800201 <__DATA_REGION_ORIGIN__+0x1>
 60a:	10 92 02 02 	sts	0x0202, r1	; 0x800202 <__DATA_REGION_ORIGIN__+0x2>
 60e:	10 92 03 02 	sts	0x0203, r1	; 0x800203 <__DATA_REGION_ORIGIN__+0x3>
 612:	2a c0       	rjmp	.+84     	; 0x668 <ADC2val+0x11e>
	}
	else{
		if(adcValue2>max3){
 614:	60 91 0e 02 	lds	r22, 0x020E	; 0x80020e <adcValue2>
 618:	70 91 0f 02 	lds	r23, 0x020F	; 0x80020f <adcValue2+0x1>
 61c:	07 2e       	mov	r0, r23
 61e:	00 0c       	add	r0, r0
 620:	88 0b       	sbc	r24, r24
 622:	99 0b       	sbc	r25, r25
 624:	05 d1       	rcall	.+522    	; 0x830 <__floatsisf>
 626:	20 91 00 02 	lds	r18, 0x0200	; 0x800200 <__DATA_REGION_ORIGIN__>
 62a:	30 91 01 02 	lds	r19, 0x0201	; 0x800201 <__DATA_REGION_ORIGIN__+0x1>
 62e:	40 91 02 02 	lds	r20, 0x0202	; 0x800202 <__DATA_REGION_ORIGIN__+0x2>
 632:	50 91 03 02 	lds	r21, 0x0203	; 0x800203 <__DATA_REGION_ORIGIN__+0x3>
 636:	ac d1       	rcall	.+856    	; 0x990 <__gesf2>
 638:	18 16       	cp	r1, r24
 63a:	8c f4       	brge	.+34     	; 0x65e <ADC2val+0x114>
			max3=adcValue2;
 63c:	60 91 0e 02 	lds	r22, 0x020E	; 0x80020e <adcValue2>
 640:	70 91 0f 02 	lds	r23, 0x020F	; 0x80020f <adcValue2+0x1>
 644:	07 2e       	mov	r0, r23
 646:	00 0c       	add	r0, r0
 648:	88 0b       	sbc	r24, r24
 64a:	99 0b       	sbc	r25, r25
 64c:	f1 d0       	rcall	.+482    	; 0x830 <__floatsisf>
 64e:	60 93 00 02 	sts	0x0200, r22	; 0x800200 <__DATA_REGION_ORIGIN__>
 652:	70 93 01 02 	sts	0x0201, r23	; 0x800201 <__DATA_REGION_ORIGIN__+0x1>
 656:	80 93 02 02 	sts	0x0202, r24	; 0x800202 <__DATA_REGION_ORIGIN__+0x2>
 65a:	90 93 03 02 	sts	0x0203, r25	; 0x800203 <__DATA_REGION_ORIGIN__+0x3>
 65e:	21 96       	adiw	r28, 0x01	; 1
		}
		y++;
 660:	d0 93 09 02 	sts	0x0209, r29	; 0x800209 <y+0x1>
 664:	c0 93 08 02 	sts	0x0208, r28	; 0x800208 <y>
 668:	ea e7       	ldi	r30, 0x7A	; 122
	}
	ADCSRA |= (1 << ADSC); // Start the next ADC conversion
 66a:	f0 e0       	ldi	r31, 0x00	; 0
 66c:	80 81       	ld	r24, Z
 66e:	80 64       	ori	r24, 0x40	; 64
 670:	80 83       	st	Z, r24
 672:	df 91       	pop	r29
 674:	cf 91       	pop	r28
 676:	ff 90       	pop	r15
 678:	ef 90       	pop	r14
 67a:	df 90       	pop	r13
 67c:	cf 90       	pop	r12
 67e:	08 95       	ret

00000680 <__vector_29>:
 680:	1f 92       	push	r1

	k = 1;
}

ISR(ADC_vect)
{
 682:	0f 92       	push	r0
 684:	0f b6       	in	r0, 0x3f	; 63
 686:	0f 92       	push	r0
 688:	11 24       	eor	r1, r1
 68a:	0b b6       	in	r0, 0x3b	; 59
 68c:	0f 92       	push	r0
 68e:	2f 93       	push	r18
 690:	3f 93       	push	r19
 692:	4f 93       	push	r20
 694:	5f 93       	push	r21
 696:	6f 93       	push	r22
 698:	7f 93       	push	r23
 69a:	8f 93       	push	r24
 69c:	9f 93       	push	r25
 69e:	af 93       	push	r26
 6a0:	bf 93       	push	r27
 6a2:	ef 93       	push	r30
 6a4:	ff 93       	push	r31
	if ((ADMUX & 0x0F) == 0x03)
 6a6:	80 91 7c 00 	lds	r24, 0x007C	; 0x80007c <__TEXT_REGION_LENGTH__+0x7c007c>
 6aa:	8f 70       	andi	r24, 0x0F	; 15
 6ac:	83 30       	cpi	r24, 0x03	; 3
 6ae:	29 f4       	brne	.+10     	; 0x6ba <__vector_29+0x3a>
	{
		ADC3val();
 6b0:	b0 de       	rcall	.-672    	; 0x412 <ADC3val>
		configFreeRunningADC1(0x02); // Configure ADC2 after ADC3 conversion
 6b2:	82 e0       	ldi	r24, 0x02	; 2
 6b4:	90 e0       	ldi	r25, 0x00	; 0
 6b6:	dd dd       	rcall	.-1094   	; 0x272 <configFreeRunningADC1>
 6b8:	09 c0       	rjmp	.+18     	; 0x6cc <__vector_29+0x4c>
	}
	else if ((ADMUX & 0x0F) == 0x02)
 6ba:	80 91 7c 00 	lds	r24, 0x007C	; 0x80007c <__TEXT_REGION_LENGTH__+0x7c007c>
 6be:	8f 70       	andi	r24, 0x0F	; 15
 6c0:	82 30       	cpi	r24, 0x02	; 2
	{
		ADC2val();
 6c2:	21 f4       	brne	.+8      	; 0x6cc <__vector_29+0x4c>
		configFreeRunningADC1(0x03); // Configure ADC3 after ADC2 conversion
 6c4:	42 df       	rcall	.-380    	; 0x54a <ADC2val>
 6c6:	83 e0       	ldi	r24, 0x03	; 3
 6c8:	90 e0       	ldi	r25, 0x00	; 0
 6ca:	d3 dd       	rcall	.-1114   	; 0x272 <configFreeRunningADC1>
	}
	
}
 6cc:	ff 91       	pop	r31
 6ce:	ef 91       	pop	r30
 6d0:	bf 91       	pop	r27
 6d2:	af 91       	pop	r26
 6d4:	9f 91       	pop	r25
 6d6:	8f 91       	pop	r24
 6d8:	7f 91       	pop	r23
 6da:	6f 91       	pop	r22
 6dc:	5f 91       	pop	r21
 6de:	4f 91       	pop	r20
 6e0:	3f 91       	pop	r19
 6e2:	2f 91       	pop	r18
 6e4:	0f 90       	pop	r0
 6e6:	0b be       	out	0x3b, r0	; 59
 6e8:	0f 90       	pop	r0
 6ea:	0f be       	out	0x3f, r0	; 63
 6ec:	0f 90       	pop	r0
 6ee:	1f 90       	pop	r1
 6f0:	18 95       	reti

000006f2 <__cmpsf2>:
 6f2:	d9 d0       	rcall	.+434    	; 0x8a6 <__fp_cmp>
 6f4:	08 f4       	brcc	.+2      	; 0x6f8 <__cmpsf2+0x6>
 6f6:	81 e0       	ldi	r24, 0x01	; 1
 6f8:	08 95       	ret

000006fa <__divsf3>:
 6fa:	0c d0       	rcall	.+24     	; 0x714 <__divsf3x>
 6fc:	0f c1       	rjmp	.+542    	; 0x91c <__fp_round>
 6fe:	07 d1       	rcall	.+526    	; 0x90e <__fp_pscB>
 700:	40 f0       	brcs	.+16     	; 0x712 <__divsf3+0x18>
 702:	fe d0       	rcall	.+508    	; 0x900 <__fp_pscA>
 704:	30 f0       	brcs	.+12     	; 0x712 <__divsf3+0x18>
 706:	21 f4       	brne	.+8      	; 0x710 <__divsf3+0x16>
 708:	5f 3f       	cpi	r21, 0xFF	; 255
 70a:	19 f0       	breq	.+6      	; 0x712 <__divsf3+0x18>
 70c:	f0 c0       	rjmp	.+480    	; 0x8ee <__fp_inf>
 70e:	51 11       	cpse	r21, r1
 710:	39 c1       	rjmp	.+626    	; 0x984 <__fp_szero>
 712:	f3 c0       	rjmp	.+486    	; 0x8fa <__fp_nan>

00000714 <__divsf3x>:
 714:	14 d1       	rcall	.+552    	; 0x93e <__fp_split3>
 716:	98 f3       	brcs	.-26     	; 0x6fe <__divsf3+0x4>

00000718 <__divsf3_pse>:
 718:	99 23       	and	r25, r25
 71a:	c9 f3       	breq	.-14     	; 0x70e <__divsf3+0x14>
 71c:	55 23       	and	r21, r21
 71e:	b1 f3       	breq	.-20     	; 0x70c <__divsf3+0x12>
 720:	95 1b       	sub	r25, r21
 722:	55 0b       	sbc	r21, r21
 724:	bb 27       	eor	r27, r27
 726:	aa 27       	eor	r26, r26
 728:	62 17       	cp	r22, r18
 72a:	73 07       	cpc	r23, r19
 72c:	84 07       	cpc	r24, r20
 72e:	38 f0       	brcs	.+14     	; 0x73e <__divsf3_pse+0x26>
 730:	9f 5f       	subi	r25, 0xFF	; 255
 732:	5f 4f       	sbci	r21, 0xFF	; 255
 734:	22 0f       	add	r18, r18
 736:	33 1f       	adc	r19, r19
 738:	44 1f       	adc	r20, r20
 73a:	aa 1f       	adc	r26, r26
 73c:	a9 f3       	breq	.-22     	; 0x728 <__divsf3_pse+0x10>
 73e:	33 d0       	rcall	.+102    	; 0x7a6 <__divsf3_pse+0x8e>
 740:	0e 2e       	mov	r0, r30
 742:	3a f0       	brmi	.+14     	; 0x752 <__divsf3_pse+0x3a>
 744:	e0 e8       	ldi	r30, 0x80	; 128
 746:	30 d0       	rcall	.+96     	; 0x7a8 <__divsf3_pse+0x90>
 748:	91 50       	subi	r25, 0x01	; 1
 74a:	50 40       	sbci	r21, 0x00	; 0
 74c:	e6 95       	lsr	r30
 74e:	00 1c       	adc	r0, r0
 750:	ca f7       	brpl	.-14     	; 0x744 <__divsf3_pse+0x2c>
 752:	29 d0       	rcall	.+82     	; 0x7a6 <__divsf3_pse+0x8e>
 754:	fe 2f       	mov	r31, r30
 756:	27 d0       	rcall	.+78     	; 0x7a6 <__divsf3_pse+0x8e>
 758:	66 0f       	add	r22, r22
 75a:	77 1f       	adc	r23, r23
 75c:	88 1f       	adc	r24, r24
 75e:	bb 1f       	adc	r27, r27
 760:	26 17       	cp	r18, r22
 762:	37 07       	cpc	r19, r23
 764:	48 07       	cpc	r20, r24
 766:	ab 07       	cpc	r26, r27
 768:	b0 e8       	ldi	r27, 0x80	; 128
 76a:	09 f0       	breq	.+2      	; 0x76e <__divsf3_pse+0x56>
 76c:	bb 0b       	sbc	r27, r27
 76e:	80 2d       	mov	r24, r0
 770:	bf 01       	movw	r22, r30
 772:	ff 27       	eor	r31, r31
 774:	93 58       	subi	r25, 0x83	; 131
 776:	5f 4f       	sbci	r21, 0xFF	; 255
 778:	2a f0       	brmi	.+10     	; 0x784 <__divsf3_pse+0x6c>
 77a:	9e 3f       	cpi	r25, 0xFE	; 254
 77c:	51 05       	cpc	r21, r1
 77e:	68 f0       	brcs	.+26     	; 0x79a <__divsf3_pse+0x82>
 780:	b6 c0       	rjmp	.+364    	; 0x8ee <__fp_inf>
 782:	00 c1       	rjmp	.+512    	; 0x984 <__fp_szero>
 784:	5f 3f       	cpi	r21, 0xFF	; 255
 786:	ec f3       	brlt	.-6      	; 0x782 <__divsf3_pse+0x6a>
 788:	98 3e       	cpi	r25, 0xE8	; 232
 78a:	dc f3       	brlt	.-10     	; 0x782 <__divsf3_pse+0x6a>
 78c:	86 95       	lsr	r24
 78e:	77 95       	ror	r23
 790:	67 95       	ror	r22
 792:	b7 95       	ror	r27
 794:	f7 95       	ror	r31
 796:	9f 5f       	subi	r25, 0xFF	; 255
 798:	c9 f7       	brne	.-14     	; 0x78c <__divsf3_pse+0x74>
 79a:	88 0f       	add	r24, r24
 79c:	91 1d       	adc	r25, r1
 79e:	96 95       	lsr	r25
 7a0:	87 95       	ror	r24
 7a2:	97 f9       	bld	r25, 7
 7a4:	08 95       	ret
 7a6:	e1 e0       	ldi	r30, 0x01	; 1
 7a8:	66 0f       	add	r22, r22
 7aa:	77 1f       	adc	r23, r23
 7ac:	88 1f       	adc	r24, r24
 7ae:	bb 1f       	adc	r27, r27
 7b0:	62 17       	cp	r22, r18
 7b2:	73 07       	cpc	r23, r19
 7b4:	84 07       	cpc	r24, r20
 7b6:	ba 07       	cpc	r27, r26
 7b8:	20 f0       	brcs	.+8      	; 0x7c2 <__divsf3_pse+0xaa>
 7ba:	62 1b       	sub	r22, r18
 7bc:	73 0b       	sbc	r23, r19
 7be:	84 0b       	sbc	r24, r20
 7c0:	ba 0b       	sbc	r27, r26
 7c2:	ee 1f       	adc	r30, r30
 7c4:	88 f7       	brcc	.-30     	; 0x7a8 <__divsf3_pse+0x90>
 7c6:	e0 95       	com	r30
 7c8:	08 95       	ret

000007ca <__fixsfsi>:
 7ca:	04 d0       	rcall	.+8      	; 0x7d4 <__fixunssfsi>
 7cc:	68 94       	set
 7ce:	b1 11       	cpse	r27, r1
 7d0:	d9 c0       	rjmp	.+434    	; 0x984 <__fp_szero>
 7d2:	08 95       	ret

000007d4 <__fixunssfsi>:
 7d4:	bc d0       	rcall	.+376    	; 0x94e <__fp_splitA>
 7d6:	88 f0       	brcs	.+34     	; 0x7fa <__fixunssfsi+0x26>
 7d8:	9f 57       	subi	r25, 0x7F	; 127
 7da:	90 f0       	brcs	.+36     	; 0x800 <__fixunssfsi+0x2c>
 7dc:	b9 2f       	mov	r27, r25
 7de:	99 27       	eor	r25, r25
 7e0:	b7 51       	subi	r27, 0x17	; 23
 7e2:	a0 f0       	brcs	.+40     	; 0x80c <__fixunssfsi+0x38>
 7e4:	d1 f0       	breq	.+52     	; 0x81a <__fixunssfsi+0x46>
 7e6:	66 0f       	add	r22, r22
 7e8:	77 1f       	adc	r23, r23
 7ea:	88 1f       	adc	r24, r24
 7ec:	99 1f       	adc	r25, r25
 7ee:	1a f0       	brmi	.+6      	; 0x7f6 <__fixunssfsi+0x22>
 7f0:	ba 95       	dec	r27
 7f2:	c9 f7       	brne	.-14     	; 0x7e6 <__fixunssfsi+0x12>
 7f4:	12 c0       	rjmp	.+36     	; 0x81a <__fixunssfsi+0x46>
 7f6:	b1 30       	cpi	r27, 0x01	; 1
 7f8:	81 f0       	breq	.+32     	; 0x81a <__fixunssfsi+0x46>
 7fa:	c3 d0       	rcall	.+390    	; 0x982 <__fp_zero>
 7fc:	b1 e0       	ldi	r27, 0x01	; 1
 7fe:	08 95       	ret
 800:	c0 c0       	rjmp	.+384    	; 0x982 <__fp_zero>
 802:	67 2f       	mov	r22, r23
 804:	78 2f       	mov	r23, r24
 806:	88 27       	eor	r24, r24
 808:	b8 5f       	subi	r27, 0xF8	; 248
 80a:	39 f0       	breq	.+14     	; 0x81a <__fixunssfsi+0x46>
 80c:	b9 3f       	cpi	r27, 0xF9	; 249
 80e:	cc f3       	brlt	.-14     	; 0x802 <__fixunssfsi+0x2e>
 810:	86 95       	lsr	r24
 812:	77 95       	ror	r23
 814:	67 95       	ror	r22
 816:	b3 95       	inc	r27
 818:	d9 f7       	brne	.-10     	; 0x810 <__fixunssfsi+0x3c>
 81a:	3e f4       	brtc	.+14     	; 0x82a <__fixunssfsi+0x56>
 81c:	90 95       	com	r25
 81e:	80 95       	com	r24
 820:	70 95       	com	r23
 822:	61 95       	neg	r22
 824:	7f 4f       	sbci	r23, 0xFF	; 255
 826:	8f 4f       	sbci	r24, 0xFF	; 255
 828:	9f 4f       	sbci	r25, 0xFF	; 255
 82a:	08 95       	ret

0000082c <__floatunsisf>:
 82c:	e8 94       	clt
 82e:	09 c0       	rjmp	.+18     	; 0x842 <__floatsisf+0x12>

00000830 <__floatsisf>:
 830:	97 fb       	bst	r25, 7
 832:	3e f4       	brtc	.+14     	; 0x842 <__floatsisf+0x12>
 834:	90 95       	com	r25
 836:	80 95       	com	r24
 838:	70 95       	com	r23
 83a:	61 95       	neg	r22
 83c:	7f 4f       	sbci	r23, 0xFF	; 255
 83e:	8f 4f       	sbci	r24, 0xFF	; 255
 840:	9f 4f       	sbci	r25, 0xFF	; 255
 842:	99 23       	and	r25, r25
 844:	a9 f0       	breq	.+42     	; 0x870 <__floatsisf+0x40>
 846:	f9 2f       	mov	r31, r25
 848:	96 e9       	ldi	r25, 0x96	; 150
 84a:	bb 27       	eor	r27, r27
 84c:	93 95       	inc	r25
 84e:	f6 95       	lsr	r31
 850:	87 95       	ror	r24
 852:	77 95       	ror	r23
 854:	67 95       	ror	r22
 856:	b7 95       	ror	r27
 858:	f1 11       	cpse	r31, r1
 85a:	f8 cf       	rjmp	.-16     	; 0x84c <__floatsisf+0x1c>
 85c:	fa f4       	brpl	.+62     	; 0x89c <__floatsisf+0x6c>
 85e:	bb 0f       	add	r27, r27
 860:	11 f4       	brne	.+4      	; 0x866 <__floatsisf+0x36>
 862:	60 ff       	sbrs	r22, 0
 864:	1b c0       	rjmp	.+54     	; 0x89c <__floatsisf+0x6c>
 866:	6f 5f       	subi	r22, 0xFF	; 255
 868:	7f 4f       	sbci	r23, 0xFF	; 255
 86a:	8f 4f       	sbci	r24, 0xFF	; 255
 86c:	9f 4f       	sbci	r25, 0xFF	; 255
 86e:	16 c0       	rjmp	.+44     	; 0x89c <__floatsisf+0x6c>
 870:	88 23       	and	r24, r24
 872:	11 f0       	breq	.+4      	; 0x878 <__floatsisf+0x48>
 874:	96 e9       	ldi	r25, 0x96	; 150
 876:	11 c0       	rjmp	.+34     	; 0x89a <__floatsisf+0x6a>
 878:	77 23       	and	r23, r23
 87a:	21 f0       	breq	.+8      	; 0x884 <__floatsisf+0x54>
 87c:	9e e8       	ldi	r25, 0x8E	; 142
 87e:	87 2f       	mov	r24, r23
 880:	76 2f       	mov	r23, r22
 882:	05 c0       	rjmp	.+10     	; 0x88e <__floatsisf+0x5e>
 884:	66 23       	and	r22, r22
 886:	71 f0       	breq	.+28     	; 0x8a4 <__floatsisf+0x74>
 888:	96 e8       	ldi	r25, 0x86	; 134
 88a:	86 2f       	mov	r24, r22
 88c:	70 e0       	ldi	r23, 0x00	; 0
 88e:	60 e0       	ldi	r22, 0x00	; 0
 890:	2a f0       	brmi	.+10     	; 0x89c <__floatsisf+0x6c>
 892:	9a 95       	dec	r25
 894:	66 0f       	add	r22, r22
 896:	77 1f       	adc	r23, r23
 898:	88 1f       	adc	r24, r24
 89a:	da f7       	brpl	.-10     	; 0x892 <__floatsisf+0x62>
 89c:	88 0f       	add	r24, r24
 89e:	96 95       	lsr	r25
 8a0:	87 95       	ror	r24
 8a2:	97 f9       	bld	r25, 7
 8a4:	08 95       	ret

000008a6 <__fp_cmp>:
 8a6:	99 0f       	add	r25, r25
 8a8:	00 08       	sbc	r0, r0
 8aa:	55 0f       	add	r21, r21
 8ac:	aa 0b       	sbc	r26, r26
 8ae:	e0 e8       	ldi	r30, 0x80	; 128
 8b0:	fe ef       	ldi	r31, 0xFE	; 254
 8b2:	16 16       	cp	r1, r22
 8b4:	17 06       	cpc	r1, r23
 8b6:	e8 07       	cpc	r30, r24
 8b8:	f9 07       	cpc	r31, r25
 8ba:	c0 f0       	brcs	.+48     	; 0x8ec <__fp_cmp+0x46>
 8bc:	12 16       	cp	r1, r18
 8be:	13 06       	cpc	r1, r19
 8c0:	e4 07       	cpc	r30, r20
 8c2:	f5 07       	cpc	r31, r21
 8c4:	98 f0       	brcs	.+38     	; 0x8ec <__fp_cmp+0x46>
 8c6:	62 1b       	sub	r22, r18
 8c8:	73 0b       	sbc	r23, r19
 8ca:	84 0b       	sbc	r24, r20
 8cc:	95 0b       	sbc	r25, r21
 8ce:	39 f4       	brne	.+14     	; 0x8de <__fp_cmp+0x38>
 8d0:	0a 26       	eor	r0, r26
 8d2:	61 f0       	breq	.+24     	; 0x8ec <__fp_cmp+0x46>
 8d4:	23 2b       	or	r18, r19
 8d6:	24 2b       	or	r18, r20
 8d8:	25 2b       	or	r18, r21
 8da:	21 f4       	brne	.+8      	; 0x8e4 <__fp_cmp+0x3e>
 8dc:	08 95       	ret
 8de:	0a 26       	eor	r0, r26
 8e0:	09 f4       	brne	.+2      	; 0x8e4 <__fp_cmp+0x3e>
 8e2:	a1 40       	sbci	r26, 0x01	; 1
 8e4:	a6 95       	lsr	r26
 8e6:	8f ef       	ldi	r24, 0xFF	; 255
 8e8:	81 1d       	adc	r24, r1
 8ea:	81 1d       	adc	r24, r1
 8ec:	08 95       	ret

000008ee <__fp_inf>:
 8ee:	97 f9       	bld	r25, 7
 8f0:	9f 67       	ori	r25, 0x7F	; 127
 8f2:	80 e8       	ldi	r24, 0x80	; 128
 8f4:	70 e0       	ldi	r23, 0x00	; 0
 8f6:	60 e0       	ldi	r22, 0x00	; 0
 8f8:	08 95       	ret

000008fa <__fp_nan>:
 8fa:	9f ef       	ldi	r25, 0xFF	; 255
 8fc:	80 ec       	ldi	r24, 0xC0	; 192
 8fe:	08 95       	ret

00000900 <__fp_pscA>:
 900:	00 24       	eor	r0, r0
 902:	0a 94       	dec	r0
 904:	16 16       	cp	r1, r22
 906:	17 06       	cpc	r1, r23
 908:	18 06       	cpc	r1, r24
 90a:	09 06       	cpc	r0, r25
 90c:	08 95       	ret

0000090e <__fp_pscB>:
 90e:	00 24       	eor	r0, r0
 910:	0a 94       	dec	r0
 912:	12 16       	cp	r1, r18
 914:	13 06       	cpc	r1, r19
 916:	14 06       	cpc	r1, r20
 918:	05 06       	cpc	r0, r21
 91a:	08 95       	ret

0000091c <__fp_round>:
 91c:	09 2e       	mov	r0, r25
 91e:	03 94       	inc	r0
 920:	00 0c       	add	r0, r0
 922:	11 f4       	brne	.+4      	; 0x928 <__fp_round+0xc>
 924:	88 23       	and	r24, r24
 926:	52 f0       	brmi	.+20     	; 0x93c <__fp_round+0x20>
 928:	bb 0f       	add	r27, r27
 92a:	40 f4       	brcc	.+16     	; 0x93c <__fp_round+0x20>
 92c:	bf 2b       	or	r27, r31
 92e:	11 f4       	brne	.+4      	; 0x934 <__fp_round+0x18>
 930:	60 ff       	sbrs	r22, 0
 932:	04 c0       	rjmp	.+8      	; 0x93c <__fp_round+0x20>
 934:	6f 5f       	subi	r22, 0xFF	; 255
 936:	7f 4f       	sbci	r23, 0xFF	; 255
 938:	8f 4f       	sbci	r24, 0xFF	; 255
 93a:	9f 4f       	sbci	r25, 0xFF	; 255
 93c:	08 95       	ret

0000093e <__fp_split3>:
 93e:	57 fd       	sbrc	r21, 7
 940:	90 58       	subi	r25, 0x80	; 128
 942:	44 0f       	add	r20, r20
 944:	55 1f       	adc	r21, r21
 946:	59 f0       	breq	.+22     	; 0x95e <__fp_splitA+0x10>
 948:	5f 3f       	cpi	r21, 0xFF	; 255
 94a:	71 f0       	breq	.+28     	; 0x968 <__fp_splitA+0x1a>
 94c:	47 95       	ror	r20

0000094e <__fp_splitA>:
 94e:	88 0f       	add	r24, r24
 950:	97 fb       	bst	r25, 7
 952:	99 1f       	adc	r25, r25
 954:	61 f0       	breq	.+24     	; 0x96e <__fp_splitA+0x20>
 956:	9f 3f       	cpi	r25, 0xFF	; 255
 958:	79 f0       	breq	.+30     	; 0x978 <__fp_splitA+0x2a>
 95a:	87 95       	ror	r24
 95c:	08 95       	ret
 95e:	12 16       	cp	r1, r18
 960:	13 06       	cpc	r1, r19
 962:	14 06       	cpc	r1, r20
 964:	55 1f       	adc	r21, r21
 966:	f2 cf       	rjmp	.-28     	; 0x94c <__fp_split3+0xe>
 968:	46 95       	lsr	r20
 96a:	f1 df       	rcall	.-30     	; 0x94e <__fp_splitA>
 96c:	08 c0       	rjmp	.+16     	; 0x97e <__fp_splitA+0x30>
 96e:	16 16       	cp	r1, r22
 970:	17 06       	cpc	r1, r23
 972:	18 06       	cpc	r1, r24
 974:	99 1f       	adc	r25, r25
 976:	f1 cf       	rjmp	.-30     	; 0x95a <__fp_splitA+0xc>
 978:	86 95       	lsr	r24
 97a:	71 05       	cpc	r23, r1
 97c:	61 05       	cpc	r22, r1
 97e:	08 94       	sec
 980:	08 95       	ret

00000982 <__fp_zero>:
 982:	e8 94       	clt

00000984 <__fp_szero>:
 984:	bb 27       	eor	r27, r27
 986:	66 27       	eor	r22, r22
 988:	77 27       	eor	r23, r23
 98a:	cb 01       	movw	r24, r22
 98c:	97 f9       	bld	r25, 7
 98e:	08 95       	ret

00000990 <__gesf2>:
 990:	8a df       	rcall	.-236    	; 0x8a6 <__fp_cmp>
 992:	08 f4       	brcc	.+2      	; 0x996 <__gesf2+0x6>
 994:	8f ef       	ldi	r24, 0xFF	; 255
 996:	08 95       	ret

00000998 <__divmodhi4>:
 998:	97 fb       	bst	r25, 7
 99a:	07 2e       	mov	r0, r23
 99c:	16 f4       	brtc	.+4      	; 0x9a2 <__divmodhi4+0xa>
 99e:	00 94       	com	r0
 9a0:	06 d0       	rcall	.+12     	; 0x9ae <__divmodhi4_neg1>
 9a2:	77 fd       	sbrc	r23, 7
 9a4:	08 d0       	rcall	.+16     	; 0x9b6 <__divmodhi4_neg2>
 9a6:	0b d0       	rcall	.+22     	; 0x9be <__udivmodhi4>
 9a8:	07 fc       	sbrc	r0, 7
 9aa:	05 d0       	rcall	.+10     	; 0x9b6 <__divmodhi4_neg2>
 9ac:	3e f4       	brtc	.+14     	; 0x9bc <__divmodhi4_exit>

000009ae <__divmodhi4_neg1>:
 9ae:	90 95       	com	r25
 9b0:	81 95       	neg	r24
 9b2:	9f 4f       	sbci	r25, 0xFF	; 255
 9b4:	08 95       	ret

000009b6 <__divmodhi4_neg2>:
 9b6:	70 95       	com	r23
 9b8:	61 95       	neg	r22
 9ba:	7f 4f       	sbci	r23, 0xFF	; 255

000009bc <__divmodhi4_exit>:
 9bc:	08 95       	ret

000009be <__udivmodhi4>:
 9be:	aa 1b       	sub	r26, r26
 9c0:	bb 1b       	sub	r27, r27
 9c2:	51 e1       	ldi	r21, 0x11	; 17
 9c4:	07 c0       	rjmp	.+14     	; 0x9d4 <__udivmodhi4_ep>

000009c6 <__udivmodhi4_loop>:
 9c6:	aa 1f       	adc	r26, r26
 9c8:	bb 1f       	adc	r27, r27
 9ca:	a6 17       	cp	r26, r22
 9cc:	b7 07       	cpc	r27, r23
 9ce:	10 f0       	brcs	.+4      	; 0x9d4 <__udivmodhi4_ep>
 9d0:	a6 1b       	sub	r26, r22
 9d2:	b7 0b       	sbc	r27, r23

000009d4 <__udivmodhi4_ep>:
 9d4:	88 1f       	adc	r24, r24
 9d6:	99 1f       	adc	r25, r25
 9d8:	5a 95       	dec	r21
 9da:	a9 f7       	brne	.-22     	; 0x9c6 <__udivmodhi4_loop>
 9dc:	80 95       	com	r24
 9de:	90 95       	com	r25
 9e0:	bc 01       	movw	r22, r24
 9e2:	cd 01       	movw	r24, r26
 9e4:	08 95       	ret

000009e6 <_exit>:
 9e6:	f8 94       	cli

000009e8 <__stop_program>:
 9e8:	ff cf       	rjmp	.-2      	; 0x9e8 <__stop_program>
